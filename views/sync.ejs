<!DOCTYPE html>
<html lang="en">
  <head>
    <title>Youtube Sync Player</title>
    <link id="favicon" rel="icon" href="https://glitch.com/edit/favicon-app.ico" type="image/x-icon">
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <script src="//ajax.googleapis.com/ajax/libs/jquery/1.7/jquery.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>    
    <style>
      .spacer {
        display:inline-block;
        width:18px;
      }
    </style>
  </head>

  <body>
    <div>
      視聴中の人数： <span id="watch">0</span><span class="spacer"></span>同期状況： <span id="state">-</span><br>
      SessID： <span id="sid">-</span><br>
      MovieID： <span><%= videoId %></span>
    </div>
    <div id="player"></div>
    
    <script>
      var tag = document.createElement('script');

      tag.src = "https://www.youtube.com/iframe_api";
      var firstScriptTag = document.getElementsByTagName('script')[0];
      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

      var videoId = '<%= videoId %>';

      var socket = io({query: {room: videoId}});
      var player;
      var paused = true;

      function onYouTubeIframeAPIReady() {
        player = new YT.Player('player', {
          height: '360',
          width: '640',
          videoId: videoId,
          playerVars: {
            start: 1
          },
          events: {
            'onReady': onPlayerReady,
            'onStateChange': onPlayerStateChange
          }
        });      
      }

      function onPlayerReady(event) {
        console.log("emit player ready");
        socket.emit("player ready");
      }

      /**
       * -1 – 未開始        
       * 0 – 終了          YT.PlayerState.ENDED
       * 1 – 再生中        YT.PlayerState.PLAYING
       * 2 – 一時停止       YT.PlayerState.PAUSED
       * 3 – バッファリング中  YT.PlayerState.BUFFERING
       * 5 – 頭出し済み      YT.PlayerState.CUED
       */
      function onPlayerStateChange(event) {
        console.log({
          State: event.data,
          CurrentTime: player.getCurrentTime(),
          Quality: player.getPlaybackQuality(),
          Rate: player.getPlaybackRate()
        });

        switch (event.data) {
          case YT.PlayerState.PLAYING:
            if (paused) {
              console.log("emit playing");

              $("#state").text("再生中");
              socket.emit("playing", {seek: player.getCurrentTime()});
              paused = false;
            }
            break;
          case YT.PlayerState.PAUSED:
            if (!paused) {
              console.log("emit paused");

              $("#state").text("停止中");
              socket.emit("paused", {seek: player.getCurrentTime()});
              paused = true;
            }
            break;
        }
      }

      // WebSocket Event
      socket.on("user counter", function (data) {
        console.log("on user counter");

        $("#sid").text(socket.id);
        $("#watch").text(data);
      });

      // Room Masterのみのイベント
      socket.on("join", function(id) {
        console.log("on join | user " + id);

        console.log("emit now");
        socket.emit("now", {
          toId: id,
          playerState: player.getPlayerState(),
          currentTime: player.getCurrentTime()
        });
      });
      
      // 単独イベント
      socket.on("connected", function(data) {
        console.log("on connected | player state: " + data.playerState);

        $("#state").text("停止中");
        player.seekTo(data.currentTime, true);
        player.pauseVideo();
        if (data.playerState == YT.PlayerState.PLAYING) {
          $("#state").text("再生中");
          player.playVideo();
          paused = false;
        }
      });

      // All Users
      socket.on("broadcast playing", function(seek) {
        console.log("on broadcast playing");

        $("#state").text("再生中");
        player.seekTo(seek, true);
        player.playVideo();
        paused = false;
      });
      socket.on("broadcast paused", function (seek) {
        console.log("on broadcast paused");

        $("#state").text("停止中");
        player.pauseVideo();
        player.seekTo(seek, true);
        paused = true;
      });
    </script>
  </body>
</html>
